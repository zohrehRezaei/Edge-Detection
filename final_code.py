# -*- coding: utf-8 -*-
"""Task_1_code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hOSCuqMIXrP2m-jEdThFOT4wz8zg7c2_

# Connecting to google drive
"""

#Upload "dicom_dir.zip" on google drive before running this part
 
from google.colab import drive
drive.mount('/content/drive')

"""# Unzip and read "dicom_dir.zip"
"""

#Unzip "dicom_dir.zip" in "/tmp" folder

import zipfile
import os

os.mkdir("/tmp/dicom_dir")
zip_ref = zipfile.ZipFile('/content/drive/MyDrive/dicom_dir.zip', 'r') #Opens the zip file in read mode
zip_ref.extractall('/tmp/dicom_dir') #Extracts the files into the /tmp folder
zip_ref.close()

"""# Instalation needed package"""

!pip install pydicom

"""# Metadata to csv"""

import csv
import pydicom
from pydicom.data import get_testdata_file


folder_path = "/tmp/dicom_dir"
images_path = os.listdir(folder_path)

for i in range(len(images_path)):
  ds = pydicom.dcmread(folder_path+'/'+images_path[i],stop_before_pixels=True)
  with open('metadata.csv', 'a', newline='') as csvfile:
   writer = csv.writer(csvfile)
   writer.writerow("Group Elem Description VR value".split())
   for elem in ds:
      writer.writerow([
        f"{elem.tag.group:04X}", f"{elem.tag.element:04X}",
            elem.description(), elem.VR, str(elem.value)
        ])

!pip install dicom-csv

from dicom_csv import join_tree
import csv

folder = '/tmp/dicom_dir'
meta = join_tree(folder, verbose=2)
meta.to_csv("metadata.csv")

"""# Pixel array ***(Patient's Age>80)***"""

from pydicom import dcmread
import cv2
import os

folder_path = "/tmp/dicom_dir"
images_path = os.listdir(folder_path)

os.mkdir("/tmp/up_to_80")
# Specify the output jpg/png folder path
jpg_folder_path = "/tmp/up_to_80"

for i, image in enumerate(images_path):
  ds = dcmread(folder_path+'/'+images_path[i])
  age=int(''.join(c for c in (ds.PatientAge) if c.isdigit()))


  if age>80:
      pixel_array_numpy = ds.pixel_array
      image = image.replace('.dcm', '.jpg')
      cv2.imwrite(os.path.join(jpg_folder_path, image), pixel_array_numpy)

"""# **Edge Detection**"""

import cv2
import numpy as np
from matplotlib import pyplot as plt
import os

folder_path="/tmp/up_to_80"
images_path=os.listdir(folder_path)


os.mkdir("/tmp/edge_detected")
new_folder_path="/tmp/edge_detected"

for i, image in enumerate(images_path):

  img=cv2.imread(folder_path+'/'+images_path[i],0)
  edges = cv2.Canny(img,100,200)
  
  #equalized = cv2.equalizeHist(img)

  
  #pixel_array_numpy=img.pixel_array
  #res = np.hstack((image,edges)).shape #stacking images side-by-side
  #cv2.imwrite(os.path.join(new_folder_path, edges), pixel_array_numpy)

  plt.figure(figsize=(5, 3), dpi=500)
  plt.subplot(121),plt.imshow(img,cmap = 'gray')
  plt.title('Original Image'), plt.xticks([]), plt.yticks([])
  plt.subplot(122),plt.imshow(edges,cmap = 'gray')
  plt.title('Edge Image'), plt.xticks([]), plt.yticks([])
  plt.savefig(new_folder_path+'/'+images_path[i], dpi=500, bbox_inches='tight')

import cv2
import numpy as np
from matplotlib import pyplot as plt
import os

folder_path="/tmp/up_to_80"
images_path=os.listdir(folder_path)


os.mkdir("/tmp/upTo80_edge_detected")
new_folder_path="/tmp/upTo80_edge_detected"

for i, image in enumerate(images_path):

  img=cv2.imread(folder_path+'/'+images_path[i],0)
  equalized = cv2.equalizeHist(img)

  edges = cv2.Canny(equalized,100,200)
  #pixel_array_numpy=img.pixel_array
  #res = np.hstack((image,edges)).shape #stacking images side-by-side
  #cv2.imwrite(os.path.join(new_folder_path, edges), pixel_array_numpy)

  plt.figure(figsize=(5, 3), dpi=500)
  plt.subplot(121),plt.imshow(equalized,cmap = 'gray')
  plt.title('Original Image'), plt.xticks([]), plt.yticks([])
  plt.subplot(122),plt.imshow(edges,cmap = 'gray')
  plt.title('Edge Image'), plt.xticks([]), plt.yticks([])
  plt.savefig(new_folder_path+'/'+images_path[i], dpi=500, bbox_inches='tight')


#plt.show()

"""# **Visualisation**"""

! pip install https://github.com/pandas-profiling/pandas-profiling/archive/master.zip

import pandas as pd
import numpy as np
from pandas_profiling import ProfileReport
from matplotlib import pyplot as plt


df=pd.read_csv("meta.csv")

df2=pd.DataFrame([df.PatientAge,df.PatientSex,df.Modality,df.SmokingStatus,df.ProtocolName,df.PregnancyStatus,df.Manufacturer]).transpose()

#profile=ProfileReport(df2)
#df2.groupby("PatientAge")["PatientSex"].count()
age=[]
for i in range(0,100):
  age.append(int(''.join(c for c in (df2.PatientAge[i]) if c.isdigit())))

age_range=[]
grouped_age=[]
first=30
for i in range(30,90,10):
   age_range.append([i,i+10])
   cv =sum(age.count(j) for j in range(i,i+10))
   grouped_age.append(cv)

plt.bar(["30-40","40-50","50-60","60-70","70-80","80-90"],grouped_age)
plt.ylabel("Number of Patient")
#plt.legend(["Blank Valids", "Blank Deads"])
plt.xlabel("Age")


plt.show()